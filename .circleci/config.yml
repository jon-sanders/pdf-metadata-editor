# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@5.0.0 # The Windows orb gives you everything you need to start using the Windows executor
  msix: circleci/microsoft-msix@1.1
  github-cli: circleci/github-cli@2.1.1


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test-linux:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:17.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Install build dependencies
          command: |
            sudo apt update
            sudo apt install fakeroot rpm
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - store_artifacts:
          path: target/packages/
          destination: linux
      - persist_to_workspace:
          root: target
          paths:
            - packages

  build-and-test-windows:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    executor:
      name: win/default
      size: large # can be medium, large, xlarge, 2xlarge
    steps:
      - checkout
      - run:
          name: WIX
          no_output_timeout: 30m
          shell: powershell.exe -executionpolicy bypass
          command: |
            dotnet tool install --global wix
            wix --version
            Get-Command wix
            where.exe wix
      - run:
          name: Install JDK, Maven, wix
          command: |
            which 7z.exe
            ln -s $(which 7z.exe) $(dirname `which unzip.exe`)/zip.exe
            echo -- install wix
            cd
            curl -LO https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip
            mkdir -p wix
            cd wix
            unzip ../wix311-binaries.zip
            echo  'export PATH=$(dirname `which bash.exe`):/c/Users/circleci/wix:$PATH' >> /c/Users/circleci/.bashrc
            . /c/Users/circleci/.bashrc
            which light.exe
            which candle.exe
            echo --- PATH
            echo $PATH
            echo --- Install sdkman
            export SDKMAN_DIR="/c/sdkman" && curl -s "https://get.sdkman.io" | bash
            echo --- cat /c/Users/circleci/.bashrc
            cat /c/Users/circleci/.bashrc
            echo ---
            . /c/Users/circleci/.bashrc
            sdk version
            sdk install java 17.0.8.1-tem
            sdk install maven
          shell: bash.exe
      - run:
          name: Build JDDE
          command: |
            export PATH=$(dirname `which bash.exe`):$PATH
            . /c/Users/circleci/.bashrc
            ci-scripts/jdde.sh
          shell: bash.exe
      - run:
          name: Build
          command: |
            export PATH=$(dirname `which bash.exe`):$PATH
            . /c/Users/circleci/.bashrc
            mvn -DskipTests=true clean package
          shell: bash.exe
      - run:
          name: Test
          command: |
            export PATH=$(dirname `which bash.exe`):$PATH
            . /c/Users/circleci/.bashrc
            mvn test
          shell: bash.exe
      - store_artifacts:
          path: target/packages/
          destination: windows
      - persist_to_workspace:
          root: target
          paths:
            - packages

  build-and-test-macos:
    macos:
      xcode: 14.1.0
    steps:
      - checkout
      - run:
          name: Brew
          command: |
            # set -x
            # export HOMEBREW_NO_AUTO_UPDATE=1
            # brew list
            # curl -LO https://raw.githubusercontent.com/Homebrew/homebrew-cask/4565865e9d7c3d3018ee8aa67803ea68c54dde86/Casks/temurin.rb
            # brew install --cask temurin.rb
            # brew install --ignore-dependencies maven
            curl -LO https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.12_7.pkg
            sudo installer -pkg ./OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.12_7.pkg -target /Applications
            curl -LO https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz
            tar xzf apache-maven-3.8.8-bin.tar.gz
            sudo mkdir -p /usr/local/bin/
            sudo ln -s `pwd`/apache-maven-3.8.8/bin/mvn /usr/local/bin/mvn
            java -version
            mvn -version
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      - run:
          name: Test
          command: mvn test
      - run:
          name: Remove garbase artifacts
          command: rm -f target/packages/default._*.dmg
      - store_artifacts:
          path: target/packages/
          destination: macos
      - persist_to_workspace:
          root: target
          paths:
            - packages
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=${CIRCLE_TAG}
            find ./artifacts
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -draft ${CIRCLE_TAG}  ./artifacts/packages/
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# Conditional jobs explanation: https://circleci.com/docs/workflows/#executing-workflows-for-a-git-tag
workflows:
  build-deliverables: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test-linux:
          filters:  # required since `publish-github-release` has tag filters AND requires `build`
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - build-and-test-windows:
          filters:  # required since `publish-github-release` has tag filters AND requires `build`
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - build-and-test-macos:
          filters:  # required since `publish-github-release` has tag filters AND requires `build`
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - publish-github-release:
          requires:
            - build-and-test-linux
            - build-and-test-windows
            - build-and-test-macos
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+$/